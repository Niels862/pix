function fib(n: int) -> int {
    if n <= 2 {
        return 1;
    }

    return fib(n - 1) + fib(n - 2);
}

function sum(n: int) -> int {
    if n <= 0 {
        return 0;
    }

    return n + sum(n - 1);
}

function fact(n: int) -> int {
    if n <= 1 {
        return 1;
    }

    return n * fact(n - 1);
}

function sqrt(n: int) -> int {
    return __sqrt(n // 2 + 1, n);
}

function __sqrt(i: int, q: int) -> int {
    if i * i > q {
        return __sqrt(i - 1, q);
    }

    return i;
}

function pow(x: int, y: int) -> int {
    if y == 0 {
        return 1;
    }

    return x * pow(x, y - 1);
}

function is_prime(n: int) -> bool {
    if n <= 1 {
        return False;
    }

    return __is_prime(2, n);
}

function __is_prime(i: int, n: int) -> bool {
    if i >= n // 2 {
        return True;
    }

    if n % i == 0 {
        return False;
    }

    return __is_prime(i + 1, n);
}

function mod(x: int, y: int) -> int {
    if x < y {
        return x;
    }

    return mod(x - y, y);
}

function reverse_digits(n: int) -> int {
    return __reverse_digits(mod(n, 10), n // 10);
}

function __reverse_digits(r: int, n: int) -> int {
    if n == 0 {
        return r;
    }

    return __reverse_digits(r * 10 + mod(n, 10), n // 10);
}

function mccarthy(n: int) -> int {
    if n > 100 {
        return n - 10;
    }

    return mccarthy(mccarthy(n + 11));
}

function null() {}

function test_mccarthy(i: int) {
    if i > 100 {
        return null();
    }

    iprint(mccarthy(i));
    test_mccarthy(i + 1);
}

function test_prime(i: int, end: int) {
    if i > end {
        return null();
    }

    iprint(i);
    iprint(sqrt(i));
    test_prime(i + 1, end);
}

iprint(fib(15));
#iprint(sum(200));
#iprint(fact(24));
#iprint(sqrt(1));
#iprint(sqrt(500));
#iprint(sqrt(600));
#bprint(is_prime(2));
#bprint(is_prime(449));
#iprint(reverse_digits(1234));
#iprint(reverse_digits(4556));

#test_prime(0, 256);
